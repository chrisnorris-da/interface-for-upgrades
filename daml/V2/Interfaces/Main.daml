module V2.Interfaces.Main where

import V1.Data.Main qualified as V1
import V2.Data.Main qualified as V2
import Daml.Script
import DA.Assert (assertEq)

interface IT where
  viewtype VT
  upgrade : IT

  choice C : ContractId IT with
   controller (view this).p
   do
     create $ upgrade this

  choice Upgrade : ContractId IT
   controller (view this).p
      do create (upgrade this)

  interface instance IT for V1.T where
    view = let V1.T{..} = this in VT with foo = "VT foo", p
    upgrade = let V1.T{..} = this in toInterface @IT $ V2.T with foo = "V2 foo", ..

  interface instance IT for V2.T where
    view = let V2.T{..} = this in VT with ..
    upgrade = toInterface @IT this

data VT = VT with
    p : Party
    foo : Text
     deriving (Show, Eq)

explicitEagerUpgrade : Script ()
explicitEagerUpgrade = script $ do
  p <- allocateParty "p"
  v1t <- submit p $ createCmd V1.T with ..
  [(cidIT, Some vt)] <- queryInterface @IT p
  assertEq vt.foo "VT foo"

  submit p do exerciseCmd cidIT Upgrade
  [(cidIT, Some vt)] <- queryInterface @IT p
  assertEq vt.foo "V2 foo"

implicitLazyUpgrade = script $ do
  p <- allocateParty "p"
  v1t <- submit p $ createCmd V1.T with ..
  [(cidIT, Some vt)] <- queryInterface @IT p
  assertEq vt.foo "VT foo"

  submit p do exerciseCmd cidIT C
  [(cidIT, Some vt)] <- queryInterface @IT p
  debug vt
  assertEq vt.foo "V2 foo"
